# What name should appear on the reports
serenity.project.name=Your Project Name

# What browser do you want your tests to run in, for example firefox, chrome, phantomjs or ie.
# When run test from maven, pom value will override this value
# When run from IntelliJ runner, this value will be used for Serenity driver
webdriver.driver=chrome

#webdriver.base.url=http://javawiki.immi.local:8080/display/SDLC/Our+Applications

# Path to the Chrome driver, if it is not on the system path.
webdriver.chrome.driver=C:/Temp/WebDrivers/chromedriver.exe
#Arguments to be passed to the Chrome driver, separated by commas. Example: chrome.switches = --incognito;--disable-download-notification
chrome.switches=--start-maximized;--args -disable-extensions

# Path to the firefox driver, if it is not on the system path.
webdriver.gecko.driver=C:/Temp/WebDrivers/geckodriver.exe

# Use the built-in firefox driver which support FF47 or below
#webdriver.firefox.profile=default

# Path to the ie driver, if it is not on the system path.
webdriver.ie.driver=C:/Temp/WebDrivers/IEDriverServer.exe

# How long webdriver waits for elements to appear by default, in milliseconds.
webdriver.timeouts.implicitlywait=60000

# How long webdriver waits by default when you use a fluent waiting method, in milliseconds.
webdriver.wait.for.timeout=10000

# Normally, Serenity uses SmartElementLocatorFactory, an extension of the AjaxElementLocatorFactory when instantiating page objects.
# This is to ensure that web elements are available and usable before they are used.
# For alternative behaviour, you can set this value to DisplayedElementLocatorFactory, AjaxElementLocatorFactory or DefaultElementLocatorFactory.
serenity.locator.factory=DefaultElementLocatorFactory

# How long should the driver wait for elements not immediately visible.
#serenity.timeout

# Set this property to have more finer control on how screenshots are taken. This property can take the following values:
# FOR_EACH_ACTION : Similar to serenity.verbose.screenshots
# BEFORE_AND_AFTER_EACH_STEP
# AFTER_EACH_STEP
# FOR_FAILURES : Similar to serenity.only.save.failing.screenshots
# DISABLED
serenity.take.screenshots=AFTER_EACH_STEP

# During data-driven tests, some browsers (Firefox in particular) may slow down over time due to memory leaks.
# To get around this, you can get Serenity to start a new browser session at regular intervals when it executes data-driven tests.
#serenity.restart.browser.frequency

# Pause (in ms) between each test step.
#thucycides.step.delay

# If using a provided driver, what type is it. The implementation class needs to be defined in the webdriver.provided.{type} system property.
#webdriver.provided_type

# The default starting URL for the application, and base URL for relative paths.
# Could be set in Maven pom as system property
#webdriver.base.url=http://www.border.gov.au/

# The URL to be used for remote drivers (including a selenium grid hub or SauceLabs URL)
#webdriver.remote.url=http://10.208.148.25:4444/wd/hub

# What port to run PhantomJS on (used in conjunction with webdriver.remote.url to register with a Selenium hub, e.g. -Dphantomjs.webdriver=5555 -Dwebdriver.remote.url=http://localhost:4444/wd/hub
#phantomjs.webdriver.port

# The driver to be used for remote drivers
#webdriver.remote.driver=ie

# A set of user-defined capabilities to be used to configure the WebDriver driver.
# Capabilities should be passed in as a space or semi-colon-separated list of key:value pairs,
# e.g. "build:build-1234; max-duration:300; single-window:true; tags:[tag1,tag2,tag3]"
#serenity.driver.capabilities

# The home directory for Serenity output and data files - by default, $USER_HOME/.serenity
#serenity.home

# Where should reports be generated. If project contains only one module (root module), than this path will be relative to root module,
# if project contains more than one submodule - than this path will be relative to submodule directory, also this path can be different for each submodule or can be inherited from root project property.
# https://github.com/serenity-bdd/serenity-core/wiki/Generating-reports-in-different-output-directories-with-Maven
# https://johnfergusonsmart.com/serenity-focused-reporting/
#serenity.outputDirectory

# Extension packages. This is a list of packages that will be scanned for custom TagProvider implementations. To add a custom tag provider, just implement the TagProvider interface and specify the root package for this provider in this parameter.
#serenity.ext.packages*

# Encoding used to generate the CSV exports
#serenity.report.encoding

# Set this property to provide more detailed logging of WebElementFacade steps when tests are run.
#serenity.verbose.steps

# Should Thucydides display detailed information in the test result tables. If this is set to true, test result tables will display a breakdown of the steps by result.
# This is false by default.
#serenity.reports.show.step.details

# Show statistics for manual tests in the test reports.
#serenity.report.show.manual.tests

# Report on releases (defaults to true).
#serenity.report.show.releases

# Useful if you are running Firefox tests against an HTTPS test server without a valid certificate. This will make Serenity use a profile with the AssumeUntrustedCertificateIssuer property set.
#untrusted.certificates

# Donâ€™t accept sites using untrusted certificates. By default, Thucydides accepts untrusted certificates - use this to change this behaviour.
#refuse.untrusted.certificates

# Resize the browser to the specified dimensions, in order to take larger screenshots. This should work with Internet Explorer and Firefox, but not with Chrome.
#serenity.browser.width and serenity.browser.height

# Value in pixels. If set, screenshots are resized to this size. Useful to save space.
#serenity.resized.image.width

# Set to true if you wish to save the original unscaled screenshots. This is set to false by default.
#serenity.keep.unscaled.screenshots

# Set this property to true to save the HTML source code of the screenshot web pages. This is set to false by default.
#serenity.store.html.source

# The URL used to generate links to the issue tracking system.
#serenity.issue.tracker.url

# Activate the Firebugs and FireFinder plugins for Firefox when running the WebDriver tests. This is useful for debugging, but is not recommended when running the tests on a build server.
#serenity.activate.firebugs

# Defines batch strategy. Allowed values - DIVIDE_EQUALLY (default) and DIVIDE_BY_TEST_COUNT. DIVIDE_EQUALLY will simply divide the tests equally across all batches. This could be inefficient if the number of tests vary a lot between test classes. A DIVIDE_BY_TEST_COUNT strategy could be more useful in such cases as this will create batches based on number of tests.
#serenity.batch.strategy

# If batch testing is being used, this is the size of the batches being executed.
#serenity.batch.count

# If batch testing is being used, this is the number of the batch being run on this machine.
#serenity.batch.number

# Set this to true for running all web tests in a single browser, for one test. Can be used for configuring Junit and Cucumber, default value is false.
#serenity.use.unique.browser

# Set this to false for running all web tests in same story file with one browser, can be used when Jbehave is used. default value is false
#restart.browser.each.scenario

# Activate and deactivate native events for Firefox by setting this property to true or false.
#serenity.native.events

# Set this to true to enable Java support in Firefox. By default, this is set to false as it slows down the web driver.
#security.enable_java

# The base folder of the sub-module where the jBehave stories are kept. It is assumed that this directory contains sub folders src/test/resources. If this property is set, the requirements are read from src/test/resources under this folder instead of the classpath or working directory. This property is used to support situations where your working directory is different from the requirements base dir (for example when building a multi-module project from parent pom with requirements stored inside a sub-module)
#serenity.test.requirements.basedir

# HTTP Proxy URL configuration for Firefox and PhantomJS
#serenity.proxy.http

# HTTP Proxy port configuration for Firefox and PhantomJS
#serenity.proxy.http_port

# HTTP Proxy type configuration for Firefox and PhantomJS
#serenity.proxy.type

# HTTP Proxy username configuration for Firefox and PhantomJS
#serenity.proxy.user

# HTTP Proxy password configuration for Firefox and PhantomJS
#serenity.proxy.password

# Property for providing level of serenity actions, results, etc.
# QUIET : No Thucydides logging at all
# NORMAL : Log the start and end of tests
# VERBOSE : Log the start and end of tests and test steps, default value
#serenity.logging=VERBOSE

# The root package for the tests in a given project. If provided, Serenity will use this as the root package when determining the capabilities associated with a test. If you are using the File System Requirements provider, Thucydides will expect this directory structure to exist at the top of the requirements tree. If you want to exclude packages in a requirements definition and start at a lower level in the hierarchy, use the serenity.requirement.exclusions property.
# This is also used by the PackageAnnotationBasedTagProvider to know where to look for annotated requirements.
#serenity.test.root

# Use this property if you need to completely override the location of requirements for the File System Provider.
#serenity.requirements.dir

# By default, Thucydides will read requirements from the directory structure that contains the stories. When other tag and requirements plugins are used, such as the JIRA plugin, this can cause conflicting tags. Set this property to false to deactivate this feature (it is true by default).
#serenity.use.requirements.directories

# Use this property if you need to completely override the location of requirements for the Annotated Provider. This is recommended if you use File System and Annotated provider simultaneously. The default value is stories.
#serenity.annotated.requirements.dir

# The hierarchy of requirement types. This is the list of requirement types to be used when reading requirements from the file system and when organizing the reports. It is a comma-separated list of tags.The default value is: capability, feature.
#serenity.requirements.types

# When deriving requirement types from a path, exclude any values from this comma-separated list.
#serenity.requirement.exclusions

# The base directory in which requirements are kept. It is assumed that this directory contains sub folders src/test/resources. If this property is set, the requirements are read from src/test/resources under this folder instead of the classpath or working directory. If you need to set an independent requirements directory that does not follow the src/test/resources convention, use `serenity.requirements.dir1 instead
# This property is used to support situations where your working directory is different from the requirements base dir (for example when building a multi-module project from parent pom with requirements stored inside a sub-module.
#serenity.test.requirements.basedir

# What tag names identify the release types (e.g. Release, Iteration, Sprint). A comma-separated list. By default, "Release, Iteration"
#serenity.release.types

# The path to the directory of the profile to use when starting firefox. This defaults to webdriver creating an anonymous profile. This is useful if you want to run the web tests using your own Firefox profile. If you are not sure about how to find the path to your profile, look here: http://support.mozilla.com/en-US/kb/Profiles. For example, to run the default profile on a Mac OS X system, you would do something like this:
# $ mvn test -Dwebdriver.firefox.profile=/Users/johnsmart/Library/Application\ Support/Firefox/Profiles/2owb5g1d.default
# On Windows, it would be something like:
# C:\Projects\myproject>mvn test -Dwebdriver.firefox.profile=C:\Users\John Smart\AppData\Roaming\Mozilla\Firefox\Profiles\mvxjy48u.default
#webdriver.firefox.profile

# A semicolon separated list of Firefox configuration settings. For ex.,
# -Dfirefox.preferences="browser.download.folderList=2;browser.download.manager.showWhenStarting=false;browser.download.dir=c:\downloads"
# Integer and boolean values will be converted to the corresponding types in the Firefox preferences; all other values will be treated as Strings. You can set a boolean value to true by simply specifying the property name, e.g. -Dfirefox.preferences=app.update.silent.
#firefox.preferences

# Add extra columns to the CSV output, obtained from tag values.
#serenity.csv.extra.columns

# Write the console headings using ascii-art ("ascii", default value) or in normal text ("normal")
#serenity.console.headings

# Comma separated list of tags. If provided, only JUnit classes and/or methods with tags in this list will be executed. For example,
# mvn verify -Dtags="iteration:I1"
# mvn verify -Dtags="color:red,flavor:strawberry"
#tags

# What format should test results be generated in. By default, this is "json,xml".
#output.formats

# Set this property to asciidoc to activate using Asciidoc format in narrative text.
#narrative.format

# If the base JIRA URL is defined, Serenity will build the issue tracker url using the standard JIRA form.
#jira.url

# If defined, the JIRA project id will be prepended to issue numbers.
#jira.project

# If defined, the JIRA username required to connect to JIRA.
#jira.username

# If defined, the JIRA password required to connect to JIRA.
#jira.password

#Display the pie charts on the dashboard by default. If this is set to false, the pie charts will be initially hidden on the dashboard.
#show.pie.charts

# If set, this will define the list of tag types to appear on the dashboard screens
#dashboard.tag.list

# ::If set, this will define the list of tag types to be excluded from the dashboard screens
#dashboard.excluded.tag.list

# Format the JSON test outcomes nicely. "true" or "false", turned off by default.
#json.pretty.printing

# Stack traces are by default decluttered for readability. For example, calls to instrumented code or internal test libraries is removed. This behaviour can be deactivated by setting this property to false.
#simplified.stack.traces

# Run through the steps without actually executing them.
#serenity.dry.run

# What (human) language are the Cucumber feature files written in? Defaults to "en".
#feature.file,language

# Keep the Thucydides session data between tests. Normally, the session data is cleared between tests.
#serenity.maintain.session

# Enabling or disabling in console output. All details you can find under Colors in console output
#serenity.console.colors

#by default it is turned off. This feature can cause errors if it is enabled for builds under Jenkins. Possible values are:
#true
#false (default value)
#serenity.console.colors = true

